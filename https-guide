#!/bin/bash

ROOT_PSSWD=development
CLIENT_PSSWD=temporary
RSA_BITS=4096
URL=api.cibic.io
CA_NAME=Cibic_Io
SSL_TOOL=openssl
CA_CERT_UPDATE_TOOL=update-ca-certificates
CERT_UTIL=certutil

echo "This script is meant to generate root CA certs and development certs for Cibic.io"
echo "If asked for a password, type '${PSSWD}' and hit enter."
echo "You may be prompted multiple times, just keep on doing it."

if [ `uname` != 'Linux' ]; then
    echo
    echo "                                  Oh No!"
    echo "This is meant to be ran on a linux based os. You don't appear to be on one."
    echo "If you are on windows, contact the dev team for guidance."
    echo "If you are on a unix-like OS or OSX, go ahead and look over the script and modify as necessary,"
    echo "then turn this safety check off. Cheers -smonroe"
    exit 1
fi

if [ -z `which ${SSL_TOOL}` ]; then
    echo
    echo "                                  Oh No!"
    echo "This is meant to be ran on a machine with ${SSL_TOOL} installed. You don't appear to have this."
    echo "If you have a similar tool installed, please read this guide and modify it accordingly,"
    echo "or use your package manager to install ${SSL_TOOL}."
    exit 1
fi

if [ -z `which ${CA_CERT_UPDATE_TOOL}` ]; then
    echo
    echo "                                  Oh No!"
    echo "This is meant to be ran on a machine with ${CA_CERT_UPDATE_TOOL} installed."
    echo "This script is unsure of how to tell browsers about your installed root certificates without it."
    echo "Please do some googling and figure out how to install root certificates on your os,"
    echo "and modify this script accordingly"
    exit 1
fi

if [ -z `which ${CERT_UTIL}` ]; then
    echo
    echo "                                  Oh No!"
    echo "This is meant to be ran on a machine with ${CERT_UTIL} installed."
    echo "This script is unsure of how to tell browsers about your installed root certificates without it."
    echo "you can install it on Debian based machines with 'sudo apt install -y libnss3-tools'"
    echo "I'll leave it to you to install this or modify the script accordingly"
    exit 1
fi

echo "Found all tools needed, continuing now..."

# The guide for this file located is at:
# https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/
# and includes instructions for adding root cert to OSX

# Becoming a Certificate Authority (CA)
# Self signed certificates are not trusted by devies by default, since they do not come from a trusted CA.
# One-off certificates can be downloaded to a devices trust store,
# but any additional certificates generated will have to be redistributed.
# Becoming a CA means generating a password-protected root certificate that can be installed on clients,
# and then any certificates generated with the root cert will be inherently trusted.
# Password protection is key here, otherwise anyone with access to the root cert can generate certs.
# The following steps will create a password protected root certificate,
# and then a certificate using the root, and then give a brief on adding this to clients.

# First, we become out own Certificate Authority (CA)

# First, we need our private key
${SSL_TOOL} genrsa -des3 -out ${CA_NAME}.key ${RSA_BITS} || exit 1

# Then we generate the root certificate, replace these fields as needed.
echo -e "US\nCA\nSan Jose\n${CA_NAME}\nDev\nCibic.io\n.\nasdf\n${CA_NAME}\n" | ${SSL_TOOL} req -passin pass:$ROOT_PSSWD -x509 -new -nodes -key ${CA_NAME}.key -sha256 -days 365 -out ${CA_NAME}.pem || exit 1

# Now we can generate signed certs!
# First, another private key, no inputs needed
${SSL_TOOL} genrsa -out ${URL}.key ${RSA_BITS} || exit 1

# Then, a Certificate Signing Request (CSR), with more fields and a password less than 20 characters
echo -e "US\nCA\nSan Jose\n${CA_NAME}\nDevelopment\nCibic.io\n.\nCLIENT_PASSWORD_HERE\n${CA_NAME}" | ${SSL_TOOL} req -passin pass:$CLIENT_PSSWD -new -key ${URL}.key -out ${URL}.csr || exit 1

# Almost there, we need a configuration file to define the Subject Alternative Name (SAN) extension
# I chose the api ending since thats our url, I'm unsure of how necessary this is.
# Same with the ip, just followed the guide, will test once this works.
# This might need our DNS info to work properly, this guide comes from somebody setting up an internal network.

echo "authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = ${URL}
DNS.2 = localhost" > ${URL}.ext || exit 1

# And now we generate the actual certificate! This needs the CA's root password.

${SSL_TOOL} x509 -passin pass:$ROOT_PSSWD -req -in ${URL}.csr -CA ${CA_NAME}.pem -CAkey ${CA_NAME}.key -CAcreateserial -out ${URL}.crt -days 365 -sha256 -extfile ${URL}.ext || exit 1

# Assuming we got this far, we're probably on linux and succesful, but lets check for full success and then do an install.

if [ -f ${URL}.crt -a -f ${URL}.csr  -a -f ${URL}.ext -a -f ${URL}.key -a -f ${CA_NAME}.key -a -f ${CA_NAME}.pem -a -f ${CA_NAME}.srl ]; then
    cp ${URL}.key ${URL}.crt node_router
    echo "The fillowing steps will install the root cert in your certificate authority store."
    echo "This will require your sudo password to continue."
    echo "If you don't have this, or don't wish to install, Ctrl-C now."
    # The following steps are from:
    # https://thomas-leister.de/en/how-to-import-ca-root-certificate/
    ### Script installs root.cert.pem to certificate trust store of applications using NSS
    ### (e.g. Firefox, Thunderbird, Chromium)
    ### Mozilla uses cert8, Chromium and Chrome use cert9
    ### Requirement: apt install libnss3-tools

    sudo mkdir -p /usr/local/share/ca-certificates/extra && \
        sudo cp ${CA_NAME}.pem /usr/local/share/ca-certificates/extra/${CA_NAME}.crt && \
        sudo ${CA_CERT_UPDATE_TOOL} || exit 1

    certfile="${CA_NAME}.pem"
    certname="${CA_NAME}"

    ### For cert8 (legacy - DBM)
    for certDB in $(find ~/ -name "cert8.db")
    do
        certdir=$(dirname ${certDB});
        certutil -A -n "${certname}" -t "TCu,Cu,Tu" -i ${certfile} -d dbm:${certdir}
    done

    ### For cert9 (SQL)
    for certDB in $(find ~/ -name "cert9.db")
    do
        certdir=$(dirname ${certDB});
        certutil -A -n "${certname}" -t "TCu,Cu,Tu" -i ${certfile} -d sql:${certdir}
    done
fi

# Wonderful.
# Now there are three file, .key .csr and .crt.
# .key and .crt will be given to the web server (Our EC2 instance)

# The following is from:
# https://www.ssl2buy.com/wiki/how-to-install-ssl-certificate-on-aws-ec2-instance

# At the outset, you must have the following documents handy:

#    Server certificate (.pem)
#    Private key (.key)
#    CA bundle (intermediate certificates) (?)

# Once you buy the SSL certificate, a certificate authority (CA) sends a server certificate file to your registered email.
# You need to upload it to the Identity Access Management (IAM), along with the certificate chain (CA-bundle) and the private key.

# 1. Certificate files in PEM format

# This is the first step towards installing SSL on AWS EC2 instance. The certificate files and the private key file are in the .crt file format when they are sent to you.
# They must be converted to PEM (Privacy Enhanced Mail) format in order to proceed further.

# 2.  After the conversion, the files must be uploaded one after the other into AWS

# This is done in the following steps:

#     Log in to AWS.
#     Next, sign onto the Amazon EC2
#     Search for the navigation menu on the left-hand side.
#     On the navigation menu, click (expand) ‘Network and Security.’
#     Select the option called ‘Load Balancers.’
#     Coming to the main pane, only choose and select on the ‘Load Balancers’ icon when you upload the certificate.
#     Click on the ‘listeners’ tab. Click on ‘Edit’ and then ‘Add’
#     Select HTTPS as protocol under SSL certificate and click ‘Change’ in the ‘SSL Certificate’ column.
#     Click the radio button called ‘Upload a new SSL certificate to AWS Identity and Access Management (IAM).
#     You may wish to rename your certificate. Renaming it by a name that you are likely to remember in the future can result in a lot less hassle for you.
#     For the Private Key field, simply paste the text from your file. This should include the “—–BEGIN RSA PRIVATE KEY—–” and “—–END RSA PRIVATE KEY—–“
#     For the Public Key Certificate field, simply paste the text from your file. You must include the “—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–“
#     For the ‘Certificate Chain’ field, simply paste the text from your ‘CA_bundle.crt’ or file equivalent.
#     In every case, you should have a total of three certificates in CA-bundle in this text field.
#     You must include the “—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–“ lines here as well.
#     Click on the blue-colored Save button to finalize your SSL install.

# 3. Certificate confirmation

# IAM will confirm your certificate details once you upload a certificate.

#     For acceptance, the following file format must be followed – X.509 PEM.
#     The current certificate date should be between the start date and end date.
#     The private key should match with the certificate.
#     The private key must be in PEM format.
#     The private key must not have an encrypted password.

# You must wait for at least 5 minutes for the changes you made to take effect in AWS EC2. Once you restart, you will find that the changes have been accommodated.

# Once the process is over, it is a good practice to check and test whether the SSL certificate has been properly configured and set-up.

